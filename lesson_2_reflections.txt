What happens when you initialize a repository? Why do you need to do it?

initializing the repository creates the .git folder and all of he metadata files to track the changes in the repository.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is different from the working directory in that it only contains files that are to be commited to the repository. It is different from the repository in that it is a precurser to everything being bundled into a repository. It offers value by showing you the files that are to be added to a repository before actually creating it.

How can you use the staging area to make sure you have one commit per logical
change?

The staging area allows you to see the changes to make sure all of the changes per logical change are captured in the commit.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

branches are helpful when trying out experimental changes that you don't necessarily want to affect the main branch. they let you try new changes without destroying a working program.


How do the diagrams help you visualize the branch structure?

diagrams help visualize the branch structure by showing how all the branches are interconnected.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The result of merging two branches together combines the changes in two program branches into one program. We represent it that way because it is a simple way to visualize and track the changes.


What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

The pros of automatic merging is that it is easy to incorporate all of the changes to one branch without having to go and manually copy all of those changes. the con is that conflicts could arise which would lead to you going back and resolving those changes manually anyway.
